
第一天课程：


上午：


	1：jmeter 概要介绍 与 使用场景（10分钟）
	
	2：jmeter 运行环境搭建（30分钟）
			
			JDK + 程序运行文件
	
	
	2.5	什么是接口？
	
			地区查询接口
			
			http://ws.webxml.com.cn/webservices/ChinaTVprogramWebService.asmx/getAreaString
			
			https://suggest.taobao.com/sug?code=utf-8&q=衣服&callback=cb
			
			讲解接口的组成
	
	3：jmeter 目录结构介绍（10分钟）

	4：jmeter 常用元件介绍（30分钟）(介绍*)
	
		**1：测试计划
		
		**2：线程组
		
		3：测试片段
		
		4：控制器
			
			取样器
			
			逻辑控制器
					
		5：配置元件
		
		6：定时器
		
		*7：前置处理器
		
		*8：后置处理器
		
		9：断言
		
		**10：监听器
			
		练习：使用以上原件，测试一个接口
		
			京东获取单个商品价格接口:
				商品ID这么获取:http://item.jd.com/954086.html
				http://p.3.cn/prices/mgets?skuIds=J_商品ID&type=1
			
		
		
	5：jmeter 录制方法
	
	
		1：使用BadBoy 工具录制脚本并导入（30分钟）
		
		
		2：使用 JMeter 代理录制（30分钟）
			使用代理模式，最好添加上cookie管理器。
			HTTP Cookie Manager可以自动储存服务器发送给客户端的所有Cookie，
			并在发送请求时附加上合适的Cookie。
		
			操作：
				
				1：控制台中添加 http 代理
				2：设置代理内容
				3：启动代理
				4：设置浏览器代理，端口保持一致
				
		3：录制内容解析，与优化（10分钟）
		
			排斥一些不必要的静态资源 .*\.jpg.*，.*\.js，.*\.css
	
	
下午：
	
	
	3：项目练习：练习录制OSCM 项目的首页访问 添加 结果树、与聚合报告、解释字段含义（30分钟）
	
	
	4：JMETER 元件 的作用域与执行顺序（30分钟）
	
	
	5：参数化（60分钟）
		
		1：通过前置处理器参数化
		
		2：通过 CSV 参数化
			Allow quote data：选项选为“true”的时候对全角字符的处理出现乱码 
　　		Recycle on EOF：是否循环读入，因为CSV Data Set Config一次读入一行，
			分割后存入若干变量中交给一个线程，如果线程数超过文本的记录行数，那么可以选择从头再次读入
			Stop thread on EOF：到了文件尾处，是否停止线程，选项：true和false
			当Recycle on EOF 选择true时，Stop thread on EOF选择true和false无任何意义，
			通俗的讲，在前面控制了不停的循环读取，后面再来让stop或run没有任何意义
			
			Filename：F:\jmeter\csvtest.dat文件名，保存参数化数据的文件目录，可选择相对或者绝对路径（建议填写相对路径，避免脚本迁移时需要修改路径）;

			File encoding:UTF-8，F:\jmeter\csvtest.dat文件的编码格式，在保存时保存编码格式为UTF-8即可;

			Variable Names(comma-delimited)：对对应参数文件每列的变量名，类似excel文件的文件头，起到标示作用，同时也是后续引用的标识符，建议采用有意义的英文标示;

                                (如：有几列参数，在这里面就写几个参数名称，每个名称中间用分隔符分割，这里的 user,pwd，可以被利用变量名来引用：user,{pwd};

			Delimitet：参数文件分隔符，用来在“Variable Names”中分隔参数，与参数文件中的分隔符保持一致即可;

			Allow quote data：是否允许引用数据，默认false，选项选为“true”的时候对全角字符的处理出现乱码 ;

			Recycle on EOF？：是否循环读取参数文件内容；因为CSV Data Set Config一次读入一行，分割后存入若干变量中交给一个线程，如果线程数超过文本的记录行数，那么可以选择从头再次读入;

			△ Ture：为true时，当已读取完参数文件内的测试用例数据，还需继续获取用例数据时，此时会循环读取参数文件数据（即：读取文件到结尾时，再重头读取文件）;

			△False：为false时，若已至文件末尾，则不再继续读取测试数据；通常在“线程组线程数* 线程组循环次数＞参数文件行数”时，选用false（即：读取文件到结尾时，停止读取文件）;

			Stop thread on EOF?：当Recycle on EOF为False时（读取文件到结尾），停止进程，当Recycle on EOF为True时，此项无意义;

			△若为ture，则在读取到参数文件行末尾时，终止参数文件读取线程；

			△若为false，此时线程继续读取，但会请求错误，因此时读取的数据为EOF;

			Sharing mode:共享模式，即参数文件的作用域，有以下几种方式：

			△All threads:当前测试计划中的所有线程中的所有的线程都有效，默认;

			△Current thread group:当前线程组中的线程有效;

			△Current thread:当前线程有效;
			

		3：使用函数助手参数化
	
	5.5	定时器（20分钟）
	
		普通定时器：
		
			1、当执行一个sampler之前时，所有当前作用域内的定时器都会被执行；

			2、如果希望定时器仅应用于其中一个sampler，则把定时器作为子节点加入；
		
		高斯定时器：
			
			表示暂停时间会分布在100到400之间
			
	
	---6：设置集合点（30分钟）
	
	---7：循环控制器
	

	
	
第二天课程：


	上午：
	
	1：post 请求（30分钟）
		
		http://ws.webxml.com.cn/webservices/ChinaTVprogramWebService.asmx
		
		
	2：	定时器（20分钟）
	
		普通定时器：
		
			1、当执行一个sampler之前时，所有当前作用域内的定时器都会被执行；

			2、如果希望定时器仅应用于其中一个sampler，则把定时器作为子节点加入；
		
		高斯定时器：
			
			表示暂停时间会分布在100到400之间
	
	3：设置集合点（20分钟）
		
		添加-定时器-Synchronizing Timer
		设置集合点的人数
		设置脚本循环次数
		注意设置timeout的值  超时后继续执行

	
	4：循环控制器（10分钟）
	
		随机控制器（随机请求）
		随机顺序控制器

	5：设置检查点（60分钟）
	
			断言结果
			
			断言持续时间
			
			大小断言
	
		
	下午：
	
	
	
	1：关联设置（60分钟）
	
		1：正则表达式提取
		
			（1）引用名称：下一个请求要引用的参数名称，如填写title，则可用${title}引用它。

　　		（2）正则表达式：

		　　　　()：括起来的部分就是要提取的。

		　　　　.：匹配任何字符串。
		　　　　+：一次或多次。
		　　　　?：不要太贪婪，在找到第一个匹配项后停止。
		
		　　（3）模板：用$$引用起来，如果在正则表达式中有多个正则表达式，则可以是$2$$3$等等，表示解析到的第几个值给title。如：$1$表示解析到的第1个值

		　　（4）匹配数字：0代表随机取值，1代表全部取值，通常情况下填0

		　　（5）缺省值：如果参数没有取得到值，那默认给一个值让它取。
				
		2：项目实践练习
	
	2：常用监听器（40分钟）
	
		1：图形结果
		
		2：结果树
		
		3：聚合报告
		
		4：summary Report（掌握）
			
	3：非GUI 模式下运行JMETER（理解）（30分钟）
	
		jmeter -n -t jd.jmx -l jd.jtl
	
	4：JDBC request(60分钟)
	
			database url jdbc:mysql://localhost:3306/osm
			
			com.mysql.jdbc.Driver
			root
			root
	
	5：分布式并发（60分钟）
	
	
	6：数据库
	
	7: 插件的使用 （阶梯压测）
	
		This group will start 100 threads：设置线程组启动的线程总数为100个；

		First,wait for N seconds：启动第一个线程之前，需要等待N秒；

		Then start N threads：设置最开始时启动N个线程；

		Next,add 10 threads every 30 seconds,using ramp-up 5 seconds：每隔30秒，在5秒内启动10个线程；

		Then hold load for 60 seconds：启动的线程总数达到最大值之后，再持续运行60秒；

		Finally,stop 5 threads every 1 seconds：每秒停止5个线程；
		
		
	响应结果 中文乱码解决办法：
		添加后置处理器
			beanShellPostprocessor
			prev.setDataEncoding("UTF-8");
			
	
	
	
	
	
	
	
	
	
	